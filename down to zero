int downToZero(int n) {
    if (n == 0) return 0;

    int* dist = malloc((n + 1) * sizeof(int));
    for (int i = 0; i <= n; i++) dist[i] = -1;

    int* queue = malloc((n + 2) * sizeof(int));
    int front = 0, back = 0;

    queue[back++] = n;
    dist[n] = 0;

    while (front < back) {
        int x = queue[front++];

        if (x == 0) break;

        // Move 1: decrement by 1
        if (x - 1 >= 0 && dist[x - 1] == -1) {
            dist[x - 1] = dist[x] + 1;
            queue[back++] = x - 1;
        }

        // Move 2: factor reduction
        for (int i = 2; i * i <= x; i++) {
            if (x % i == 0) {
                int next = (x / i > i) ? x / i : i;  // max(i, x/i)
                if (dist[next] == -1) {
                    dist[next] = dist[x] + 1;
                    queue[back++] = next;
                }
            }
        }
    }

    int result = dist[0];
    free(queue);
    free(dist);
    return result;
}
